---
- name: Deploy pihole pv
  k8s:
    state: "{{ workload_state }}"
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        namespace: dns
        name: pihole
      spec:
        storageClassName: nfs-class
        capacity:
          storage: 5Gi
        accessModes:
          - ReadWriteMany
        nfs:
          server: "{{ nfs_share_ip }}"
          path: "{{ nfs_share_path }}"

- name: Deploy pihole pvc
  k8s:
    state: "{{ workload_state }}"
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        namespace: dns
        name: pihole-etc
      spec:
        storageClassName: nfs-class
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 1Gi

- name: Deploy pihole
  k8s:
    state: "{{ workload_state }}"
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: pihole
        namespace: dns
        labels:
          app: pihole
      spec:
        replicas: 1
        strategy:
          type: Recreate
        selector:
          matchLabels:
            app: pihole
        template:
          metadata:
            labels:
              app: pihole
          spec:
            hostname: "{{ pihole_host }}"
            containers:
            - name: pihole
              image: "{{ pihole_image }}"
              imagePullPolicy: IfNotPresent
              env:
              - name: TZ
                value: "{{ timezone }}"
              - name: DNS1
                value: "{{ pihole_dns }}"
              - name: WEBPASSWORD
                value: "{{ pihole_webpassword }}"
              ports:
              - name: web
                containerPort: 80
              - name : dns
                protocol : UDP
                containerPort: 53
              volumeMounts:
              - mountPath: /etc/pihole
                name: pihole-etc
                subPath: pihole
              - mountPath: /etc/dnsmasq.d
                name: pihole-etc
                subPath: dnsmasqd
            volumes:
            - name: pihole-etc
              persistentVolumeClaim:
                claimName: pihole-etc

- name: Deploy pihole service UDP
  k8s:
    state: "{{ workload_state }}"
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: "{{ pihole_host }}-dns"
        namespace: dns
        annotations:
          metallb.universe.tf/allow-shared-ip: shared-ip
      spec:
        loadBalancerIP: "{{ pihole_ip }}"
        selector:
          app: pihole
        ports:
        - protocol: UDP
          port: 53
          targetPort: 53
          name : dns
        type: LoadBalancer

- name: Deploy pihole service TCP
  k8s:
    state: "{{ workload_state }}"
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: "{{ pihole_host }}-web"
        namespace : dns
        annotations:
          metallb.universe.tf/allow-shared-ip: shared-ip
      spec:
        loadBalancerIP: "{{ pihole_ip }}"
        selector:
          app: pihole
        ports:
        - protocol: TCP
          port: 80
          targetPort: 80
          name : web
        type: LoadBalancer 