---
#- name: Update apt-cache and install all new packages
#  apt:
#    name: "*"
#    state: latest
#    update_cache: yes


  # do an "apt-get update", to ensure latest package lists
- name: apt-get update
  apt:
    update-cache: yes
    cache_valid_time: 86400

- name: Install required packages for the system
  apt:
    pkg: 
      - nfs-common
      - net-tools
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - python3-pip
      - nut
      - rtl-sdr
      - librtlsdr-dev
      - glusterfs-server 
      - glusterfs-client
      - parted
      - cifs-utils
      - python3
      - pi-bluetooth
    state: present

- name: Install required python modules
  pip:
    name: 
      - docker
      - openshift
    state: latest

- name: install all updates
  apt:
    upgrade: dist
- name: List installed and updated packages
  shell: grep -E "^$(date +%Y-%m-%d).+ (install|upgrade) " /var/log/dpkg.log |cut -d " " -f 3-5
  register: result
- name: Show Output
  debug: msg="{{ result.stdout_lines }}"

# if a new kernel is incoming, remove old ones to avoid full /boot
- name: apt-get autoremove
  command: apt-get -y autoremove
  args:
    warn: false

# # do the actual apt-get dist-upgrade
# - name: apt-get dist-upgrade
#   apt:
#     upgrade: dist # upgrade all packages to latest version
#   register: upgrade_output

# check if we need a reboot
- name: check if reboot needed
  stat: path=/var/run/reboot-required
  register: file_reboot_required

# "meta: end_play" aborts the rest of the tasks in the current «tasks:»
# section, for the current webserver
# "when:" clause ensures that the "meta: end_play" only triggers if the
# current webserver does _not_ need a reboot
- meta: end_play
  when: not file_reboot_required.stat.exists

- name: reboot node
  shell: sleep 2 && shutdown -r now "Reboot triggered by ansible"
  async: 1
  poll: 0
  ignore_errors: true

- name: Verify new update (optional)
  command: uname -mrs
  register: uname_result

- name: Display new kernel version
  debug:
    var: uname_result.stdout_lines